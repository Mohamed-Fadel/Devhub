// Mocks generated by Mockito 5.4.5 from annotations
// in devhub/test/unit/infrastructure/network/interceptors/error_interceptor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dio/src/cancel_token.dart' as _i9;
import 'package:dio/src/dio_exception.dart' as _i4;
import 'package:dio/src/dio_mixin.dart' as _i2;
import 'package:dio/src/headers.dart' as _i5;
import 'package:dio/src/options.dart' as _i3;
import 'package:dio/src/redirect_record.dart' as _i10;
import 'package:dio/src/response.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeInterceptorState_0<T> extends _i1.SmartFake
    implements _i2.InterceptorState<T> {
  _FakeInterceptorState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRequestOptions_1 extends _i1.SmartFake
    implements _i3.RequestOptions {
  _FakeRequestOptions_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStackTrace_2 extends _i1.SmartFake implements StackTrace {
  _FakeStackTrace_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDioException_3 extends _i1.SmartFake implements _i4.DioException {
  _FakeDioException_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUri_4 extends _i1.SmartFake implements Uri {
  _FakeUri_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeHeaders_5 extends _i1.SmartFake implements _i5.Headers {
  _FakeHeaders_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ErrorInterceptorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorInterceptorHandler extends _i1.Mock
    implements _i2.ErrorInterceptorHandler {
  MockErrorInterceptorHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.InterceptorState<dynamic>> get future =>
      (super.noSuchMethod(
            Invocation.getter(#future),
            returnValue: _i6.Future<_i2.InterceptorState<dynamic>>.value(
              _FakeInterceptorState_0<dynamic>(
                this,
                Invocation.getter(#future),
              ),
            ),
          )
          as _i6.Future<_i2.InterceptorState<dynamic>>);

  @override
  bool get isCompleted =>
      (super.noSuchMethod(Invocation.getter(#isCompleted), returnValue: false)
          as bool);

  @override
  void next(_i4.DioException? error) => super.noSuchMethod(
    Invocation.method(#next, [error]),
    returnValueForMissingStub: null,
  );

  @override
  void resolve(_i7.Response<dynamic>? response) => super.noSuchMethod(
    Invocation.method(#resolve, [response]),
    returnValueForMissingStub: null,
  );

  @override
  void reject(_i4.DioException? error) => super.noSuchMethod(
    Invocation.method(#reject, [error]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [DioException].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioException extends _i1.Mock implements _i4.DioException {
  MockDioException() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.RequestOptions get requestOptions =>
      (super.noSuchMethod(
            Invocation.getter(#requestOptions),
            returnValue: _FakeRequestOptions_1(
              this,
              Invocation.getter(#requestOptions),
            ),
          )
          as _i3.RequestOptions);

  @override
  _i4.DioExceptionType get type =>
      (super.noSuchMethod(
            Invocation.getter(#type),
            returnValue: _i4.DioExceptionType.connectionTimeout,
          )
          as _i4.DioExceptionType);

  @override
  StackTrace get stackTrace =>
      (super.noSuchMethod(
            Invocation.getter(#stackTrace),
            returnValue: _FakeStackTrace_2(
              this,
              Invocation.getter(#stackTrace),
            ),
          )
          as StackTrace);

  @override
  set stringBuilder(_i4.DioExceptionReadableStringBuilder? _stringBuilder) =>
      super.noSuchMethod(
        Invocation.setter(#stringBuilder, _stringBuilder),
        returnValueForMissingStub: null,
      );

  @override
  _i4.DioException copyWith({
    _i3.RequestOptions? requestOptions,
    _i7.Response<dynamic>? response,
    _i4.DioExceptionType? type,
    Object? error,
    StackTrace? stackTrace,
    String? message,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#copyWith, [], {
              #requestOptions: requestOptions,
              #response: response,
              #type: type,
              #error: error,
              #stackTrace: stackTrace,
              #message: message,
            }),
            returnValue: _FakeDioException_3(
              this,
              Invocation.method(#copyWith, [], {
                #requestOptions: requestOptions,
                #response: response,
                #type: type,
                #error: error,
                #stackTrace: stackTrace,
                #message: message,
              }),
            ),
          )
          as _i4.DioException);
}

/// A class which mocks [RequestOptions].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestOptions extends _i1.Mock implements _i3.RequestOptions {
  MockRequestOptions() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set sourceStackTrace(StackTrace? _sourceStackTrace) => super.noSuchMethod(
    Invocation.setter(#sourceStackTrace, _sourceStackTrace),
    returnValueForMissingStub: null,
  );

  @override
  set data(dynamic _data) => super.noSuchMethod(
    Invocation.setter(#data, _data),
    returnValueForMissingStub: null,
  );

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i8.dummyValue<String>(this, Invocation.getter(#path)),
          )
          as String);

  @override
  set path(String? _path) => super.noSuchMethod(
    Invocation.setter(#path, _path),
    returnValueForMissingStub: null,
  );

  @override
  set cancelToken(_i9.CancelToken? _cancelToken) => super.noSuchMethod(
    Invocation.setter(#cancelToken, _cancelToken),
    returnValueForMissingStub: null,
  );

  @override
  set onReceiveProgress(_i3.ProgressCallback? _onReceiveProgress) =>
      super.noSuchMethod(
        Invocation.setter(#onReceiveProgress, _onReceiveProgress),
        returnValueForMissingStub: null,
      );

  @override
  set onSendProgress(_i3.ProgressCallback? _onSendProgress) =>
      super.noSuchMethod(
        Invocation.setter(#onSendProgress, _onSendProgress),
        returnValueForMissingStub: null,
      );

  @override
  Uri get uri =>
      (super.noSuchMethod(
            Invocation.getter(#uri),
            returnValue: _FakeUri_4(this, Invocation.getter(#uri)),
          )
          as Uri);

  @override
  String get method =>
      (super.noSuchMethod(
            Invocation.getter(#method),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.getter(#method),
            ),
          )
          as String);

  @override
  set method(String? _method) => super.noSuchMethod(
    Invocation.setter(#method, _method),
    returnValueForMissingStub: null,
  );

  @override
  bool get preserveHeaderCase =>
      (super.noSuchMethod(
            Invocation.getter(#preserveHeaderCase),
            returnValue: false,
          )
          as bool);

  @override
  set preserveHeaderCase(bool? _preserveHeaderCase) => super.noSuchMethod(
    Invocation.setter(#preserveHeaderCase, _preserveHeaderCase),
    returnValueForMissingStub: null,
  );

  @override
  _i3.ResponseType get responseType =>
      (super.noSuchMethod(
            Invocation.getter(#responseType),
            returnValue: _i3.ResponseType.json,
          )
          as _i3.ResponseType);

  @override
  set responseType(_i3.ResponseType? _responseType) => super.noSuchMethod(
    Invocation.setter(#responseType, _responseType),
    returnValueForMissingStub: null,
  );

  @override
  _i3.ValidateStatus get validateStatus =>
      (super.noSuchMethod(
            Invocation.getter(#validateStatus),
            returnValue: (int? status) => false,
          )
          as _i3.ValidateStatus);

  @override
  set validateStatus(_i3.ValidateStatus? _validateStatus) => super.noSuchMethod(
    Invocation.setter(#validateStatus, _validateStatus),
    returnValueForMissingStub: null,
  );

  @override
  bool get receiveDataWhenStatusError =>
      (super.noSuchMethod(
            Invocation.getter(#receiveDataWhenStatusError),
            returnValue: false,
          )
          as bool);

  @override
  set receiveDataWhenStatusError(bool? _receiveDataWhenStatusError) =>
      super.noSuchMethod(
        Invocation.setter(
          #receiveDataWhenStatusError,
          _receiveDataWhenStatusError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> get extra =>
      (super.noSuchMethod(
            Invocation.getter(#extra),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  set extra(Map<String, dynamic>? _extra) => super.noSuchMethod(
    Invocation.setter(#extra, _extra),
    returnValueForMissingStub: null,
  );

  @override
  bool get followRedirects =>
      (super.noSuchMethod(
            Invocation.getter(#followRedirects),
            returnValue: false,
          )
          as bool);

  @override
  set followRedirects(bool? _followRedirects) => super.noSuchMethod(
    Invocation.setter(#followRedirects, _followRedirects),
    returnValueForMissingStub: null,
  );

  @override
  int get maxRedirects =>
      (super.noSuchMethod(Invocation.getter(#maxRedirects), returnValue: 0)
          as int);

  @override
  set maxRedirects(int? _maxRedirects) => super.noSuchMethod(
    Invocation.setter(#maxRedirects, _maxRedirects),
    returnValueForMissingStub: null,
  );

  @override
  bool get persistentConnection =>
      (super.noSuchMethod(
            Invocation.getter(#persistentConnection),
            returnValue: false,
          )
          as bool);

  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
    Invocation.setter(#persistentConnection, _persistentConnection),
    returnValueForMissingStub: null,
  );

  @override
  set requestEncoder(_i3.RequestEncoder? _requestEncoder) => super.noSuchMethod(
    Invocation.setter(#requestEncoder, _requestEncoder),
    returnValueForMissingStub: null,
  );

  @override
  set responseDecoder(_i3.ResponseDecoder? _responseDecoder) =>
      super.noSuchMethod(
        Invocation.setter(#responseDecoder, _responseDecoder),
        returnValueForMissingStub: null,
      );

  @override
  _i3.ListFormat get listFormat =>
      (super.noSuchMethod(
            Invocation.getter(#listFormat),
            returnValue: _i3.ListFormat.csv,
          )
          as _i3.ListFormat);

  @override
  set listFormat(_i3.ListFormat? _listFormat) => super.noSuchMethod(
    Invocation.setter(#listFormat, _listFormat),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> get headers =>
      (super.noSuchMethod(
            Invocation.getter(#headers),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  set headers(Map<String, dynamic>? headers) => super.noSuchMethod(
    Invocation.setter(#headers, headers),
    returnValueForMissingStub: null,
  );

  @override
  set sendTimeout(Duration? value) => super.noSuchMethod(
    Invocation.setter(#sendTimeout, value),
    returnValueForMissingStub: null,
  );

  @override
  set receiveTimeout(Duration? value) => super.noSuchMethod(
    Invocation.setter(#receiveTimeout, value),
    returnValueForMissingStub: null,
  );

  @override
  set contentType(String? contentType) => super.noSuchMethod(
    Invocation.setter(#contentType, contentType),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> get queryParameters =>
      (super.noSuchMethod(
            Invocation.getter(#queryParameters),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  set queryParameters(Map<String, dynamic>? _queryParameters) =>
      super.noSuchMethod(
        Invocation.setter(#queryParameters, _queryParameters),
        returnValueForMissingStub: null,
      );

  @override
  String get baseUrl =>
      (super.noSuchMethod(
            Invocation.getter(#baseUrl),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.getter(#baseUrl),
            ),
          )
          as String);

  @override
  set baseUrl(String? value) => super.noSuchMethod(
    Invocation.setter(#baseUrl, value),
    returnValueForMissingStub: null,
  );

  @override
  set connectTimeout(Duration? value) => super.noSuchMethod(
    Invocation.setter(#connectTimeout, value),
    returnValueForMissingStub: null,
  );

  @override
  _i3.RequestOptions copyWith({
    String? method,
    Duration? sendTimeout,
    Duration? receiveTimeout,
    Duration? connectTimeout,
    dynamic data,
    String? path,
    Map<String, dynamic>? queryParameters,
    String? baseUrl,
    _i3.ProgressCallback? onReceiveProgress,
    _i3.ProgressCallback? onSendProgress,
    _i9.CancelToken? cancelToken,
    Map<String, dynamic>? extra,
    Map<String, dynamic>? headers,
    bool? preserveHeaderCase,
    _i3.ResponseType? responseType,
    String? contentType,
    _i3.ValidateStatus? validateStatus,
    bool? receiveDataWhenStatusError,
    bool? followRedirects,
    int? maxRedirects,
    bool? persistentConnection,
    _i3.RequestEncoder? requestEncoder,
    _i3.ResponseDecoder? responseDecoder,
    _i3.ListFormat? listFormat,
    bool? setRequestContentTypeWhenNoPayload,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#copyWith, [], {
              #method: method,
              #sendTimeout: sendTimeout,
              #receiveTimeout: receiveTimeout,
              #connectTimeout: connectTimeout,
              #data: data,
              #path: path,
              #queryParameters: queryParameters,
              #baseUrl: baseUrl,
              #onReceiveProgress: onReceiveProgress,
              #onSendProgress: onSendProgress,
              #cancelToken: cancelToken,
              #extra: extra,
              #headers: headers,
              #preserveHeaderCase: preserveHeaderCase,
              #responseType: responseType,
              #contentType: contentType,
              #validateStatus: validateStatus,
              #receiveDataWhenStatusError: receiveDataWhenStatusError,
              #followRedirects: followRedirects,
              #maxRedirects: maxRedirects,
              #persistentConnection: persistentConnection,
              #requestEncoder: requestEncoder,
              #responseDecoder: responseDecoder,
              #listFormat: listFormat,
              #setRequestContentTypeWhenNoPayload:
                  setRequestContentTypeWhenNoPayload,
            }),
            returnValue: _FakeRequestOptions_1(
              this,
              Invocation.method(#copyWith, [], {
                #method: method,
                #sendTimeout: sendTimeout,
                #receiveTimeout: receiveTimeout,
                #connectTimeout: connectTimeout,
                #data: data,
                #path: path,
                #queryParameters: queryParameters,
                #baseUrl: baseUrl,
                #onReceiveProgress: onReceiveProgress,
                #onSendProgress: onSendProgress,
                #cancelToken: cancelToken,
                #extra: extra,
                #headers: headers,
                #preserveHeaderCase: preserveHeaderCase,
                #responseType: responseType,
                #contentType: contentType,
                #validateStatus: validateStatus,
                #receiveDataWhenStatusError: receiveDataWhenStatusError,
                #followRedirects: followRedirects,
                #maxRedirects: maxRedirects,
                #persistentConnection: persistentConnection,
                #requestEncoder: requestEncoder,
                #responseDecoder: responseDecoder,
                #listFormat: listFormat,
                #setRequestContentTypeWhenNoPayload:
                    setRequestContentTypeWhenNoPayload,
              }),
            ),
          )
          as _i3.RequestOptions);
}

/// A class which mocks [Response].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponse<T> extends _i1.Mock implements _i7.Response<T> {
  MockResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set data(T? _data) => super.noSuchMethod(
    Invocation.setter(#data, _data),
    returnValueForMissingStub: null,
  );

  @override
  _i3.RequestOptions get requestOptions =>
      (super.noSuchMethod(
            Invocation.getter(#requestOptions),
            returnValue: _FakeRequestOptions_1(
              this,
              Invocation.getter(#requestOptions),
            ),
          )
          as _i3.RequestOptions);

  @override
  set requestOptions(_i3.RequestOptions? _requestOptions) => super.noSuchMethod(
    Invocation.setter(#requestOptions, _requestOptions),
    returnValueForMissingStub: null,
  );

  @override
  set statusCode(int? _statusCode) => super.noSuchMethod(
    Invocation.setter(#statusCode, _statusCode),
    returnValueForMissingStub: null,
  );

  @override
  set statusMessage(String? _statusMessage) => super.noSuchMethod(
    Invocation.setter(#statusMessage, _statusMessage),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Headers get headers =>
      (super.noSuchMethod(
            Invocation.getter(#headers),
            returnValue: _FakeHeaders_5(this, Invocation.getter(#headers)),
          )
          as _i5.Headers);

  @override
  set headers(_i5.Headers? _headers) => super.noSuchMethod(
    Invocation.setter(#headers, _headers),
    returnValueForMissingStub: null,
  );

  @override
  bool get isRedirect =>
      (super.noSuchMethod(Invocation.getter(#isRedirect), returnValue: false)
          as bool);

  @override
  set isRedirect(bool? _isRedirect) => super.noSuchMethod(
    Invocation.setter(#isRedirect, _isRedirect),
    returnValueForMissingStub: null,
  );

  @override
  List<_i10.RedirectRecord> get redirects =>
      (super.noSuchMethod(
            Invocation.getter(#redirects),
            returnValue: <_i10.RedirectRecord>[],
          )
          as List<_i10.RedirectRecord>);

  @override
  set redirects(List<_i10.RedirectRecord>? _redirects) => super.noSuchMethod(
    Invocation.setter(#redirects, _redirects),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> get extra =>
      (super.noSuchMethod(
            Invocation.getter(#extra),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  set extra(Map<String, dynamic>? _extra) => super.noSuchMethod(
    Invocation.setter(#extra, _extra),
    returnValueForMissingStub: null,
  );

  @override
  Uri get realUri =>
      (super.noSuchMethod(
            Invocation.getter(#realUri),
            returnValue: _FakeUri_4(this, Invocation.getter(#realUri)),
          )
          as Uri);
}
